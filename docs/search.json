[
  {
    "objectID": "modules/qc.html",
    "href": "modules/qc.html",
    "title": "Data QC",
    "section": "",
    "text": "Opportunities in Functional Genomics: A Primer on Lab and Computational Aspects"
  },
  {
    "objectID": "modules/qc.html#technology",
    "href": "modules/qc.html#technology",
    "title": "Data QC",
    "section": "Technology",
    "text": "Technology"
  },
  {
    "objectID": "modules/qc.html#quality-control",
    "href": "modules/qc.html#quality-control",
    "title": "Data QC",
    "section": "Quality Control",
    "text": "Quality Control\nThe first step in analyzing RNA-seq data is to perform quality control checks on the raw fastq files. This step is crucial to ensure that the data is of high quality and can be accurately quantified. One popular tool for quality control is FastQC, which generates various quality metrics such as per-base sequence quality, adapter contamination, and GC content.\nTo perform quality control using FastQC, run the following command:\nfastqc input.fastq\nThis will generate a HTML report that can be viewed in a web browser.\n\nAnother popular quality control program is fastp. Here is a very nice tutorial on using fastp"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "code/kallisto.html",
    "href": "code/kallisto.html",
    "title": "kallisto",
    "section": "",
    "text": "TLDR\n\nIndexing\n```{bash}\n/home/shared/kallisto/kallisto index \\\n-i ../data/Phel_transcriptome.index \\\n../data/Phel_transcriptome.fa\n```\n\n\nQuantification\n```{bash}\nmkdir ../output/kallisto_01\n\nfind ../data/*_R1.fastq.gz \\\n| xargs basename -s _R1.fastq.gz | xargs -I{} /home/shared/kallisto/kallisto quant \\\n-i ../data/Phel_transcriptome.index \\\n-o ../output/kallisto_01/{} \\\n-t 20 \\\n--fr-stranded ../data/{}_R1.fastq.gz \\\n--rf-stranded ../data/{}_R2.fastq.gz \\\n2&gt; ../output/kallisto_01/kallisto.out\n```\n\n\nStats\n\n\n\n\n\n\nmultiqc\n\n\n\nRemember this can can be used on over 140 program outputs and is a nice way to get a quick overview of your data.\n\n\n```{bash}\n/home/sam/programs/mambaforge/bin/multiqc \\\n../output/kallisto_01/kallisto.out\n```\nor\n```{bash}\neval \"$(/opt/anaconda/anaconda3/bin/conda shell.bash hook)\"\nconda activate\nwhich multiqc\n\ncd ../output/kallisto_01/\n\nmultiqc .\n```\n\n\nMerge Quant data\n```{bash}\nperl /home/shared/trinityrnaseq-v2.12.0/util/abundance_estimates_to_matrix.pl \\\n--est_method kallisto \\\n    --gene_trans_map none \\\n    --out_prefix ../output/kallisto_01 \\\n    --name_sample_by_basedir \\\n    ../output/kallisto_01/D54_S145/abundance.tsv \\\n```\n\n\nDESeq2\n```{r}\nlibrary(DESeq2)\nlibrary(tidyverse)\nlibrary(pheatmap)\nlibrary(RColorBrewer)\nlibrary(data.table)\n```\ntho you may need to install DESeq2 first\n```{r}\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"DESeq2\")\n```\n```{r}\ncountmatrix &lt;- read.delim(\"../output/kallisto_01.isoform.counts.matrix\", header = TRUE, sep = '\\t')\nrownames(countmatrix) &lt;- countmatrix$X\ncountmatrix &lt;- countmatrix[,-1]\nhead(countmatrix)\n```\n```{r}\ncountmatrix &lt;- round(countmatrix, 0)\nstr(countmatrix)\n```\n```{r}\ndim(countmatrix)\ndim(deseq2.colData)\n\nlength(colnames(data))\n\ndeseq2.colData &lt;- data.frame(condition=factor(c(rep(\"control\", 12), rep(\"desicated\", 12))), \n                             type=factor(rep(\"single-read\", 24)))\nrownames(deseq2.colData) &lt;- colnames(data)\ndeseq2.dds &lt;- DESeqDataSetFromMatrix(countData = countmatrix,\n                                     colData = deseq2.colData, \n```\n```{r}\ndeseq2.dds &lt;- DESeq(deseq2.dds)\ndeseq2.res &lt;- results(deseq2.dds)\ndeseq2.res &lt;- deseq2.res[order(rownames(deseq2.res)), ]\n\n```\n```{r}\nvsd &lt;- vst(deseq2.dds, blind = FALSE)\nplotPCA(vsd, intgroup = \"condition\")\n```\n```{r}\n# Select top 50 differentially expressed genes\nres &lt;- results(deseq2.dds)\nres_ordered &lt;- res[order(res$padj), ]\ntop_genes &lt;- row.names(res_ordered)[1:50]\n```\n```{r}\n# Extract counts and normalize\ncounts &lt;- counts(deseq2.dds, normalized = TRUE)\ncounts_top &lt;- counts[top_genes, ]\n\n# Log-transform counts\nlog_counts_top &lt;- log2(counts_top + 1)\n\n# Generate heatmap\npheatmap(log_counts_top, scale = \"row\")\n```\n```{r}\nhead(deseq2.res)\n```\n```{r}\n# Count number of hits with adjusted p-value less then 0.05\ndim(deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj &lt;= 0.05, ])\n\ntmp &lt;- deseq2.res\n# The main plot\nplot(tmp$baseMean, tmp$log2FoldChange, pch=20, cex=0.45, ylim=c(-3, 3), log=\"x\", col=\"darkgray\",\n     main=\"DEG Dessication  (pval &lt;= 0.05)\",\n     xlab=\"mean of normalized counts\",\n     ylab=\"Log2 Fold Change\")\n# Getting the significant points and plotting them again so they're a different color\ntmp.sig &lt;- deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj &lt;= 0.05, ]\npoints(tmp.sig$baseMean, tmp.sig$log2FoldChange, pch=20, cex=0.45, col=\"red\")\n# 2 FC lines\nabline(h=c(-1,1), col=\"blue\")\n\n```"
  },
  {
    "objectID": "code/hisat.html",
    "href": "code/hisat.html",
    "title": "hisat",
    "section": "",
    "text": "TLDR\n\nGenome Prep\n{{r, engine='bash'}} /home/shared/hisat2-2.2.1/hisat2_extract_exons.py \\ ../data/Amil/ncbi_dataset/data/GCF_013753865.1/genomic.gtf \\ &gt; ../output/04-Apulcra-hisat/m_exon.tab\n{{r, engine='bash'}} /home/shared/hisat2-2.2.1/hisat2_extract_splice_sites.py \\ ../data/Amil/ncbi_dataset/data/GCF_013753865.1/genomic.gtf \\ &gt; ../output/04-Apulcra-hisat/m_splice_sites.tab\n\n\nBuild Index\n```{bash}\n/home/shared/hisat2-2.2.1/hisat2-build \\\n../data/Amil/ncbi_dataset/data/GCF_013753865.1/GCF_013753865.1_Amil_v2.1_genomic.fna \\\n../output/GCF_013753865.1_Amil_v2.1 \\\n--exon ../output/04-Apulcra-hisat/m_exon.tab \\\n--ss ../output/04-Apulcra-hisat/m_splice_sites.tab \\\n-p 40 \\\n../data/Amil/ncbi_dataset/data/GCF_013753865.1/genomic.gtf \\\n2&gt; ../output/04-Apulcra-hisat/hisat2-build_stats.txt\n```\n\n\nQuantification\n```{bash}\nfind /home/shared/8TB_HDD_02/mewing0/clamgonads-macsamples/data/raw/*gz \\\n| xargs basename -s _R1_001.fastq.gz | xargs -I{} \\\n/home/shared/hisat2-2.2.1/hisat2 \\\n-x /home/shared/8TB_HDD_02/mewing0/clamgonads-macsamples/output/hisat/GCF_026571515.1_index \\\n-p 20 \\\n-1 /home/shared/8TB_HDD_02/mewing0/clamgonads-macsamples/data/raw/{}_R1_001.fastq.gz \\\n-2 /home/shared/8TB_HDD_02/mewing0/clamgonads-macsamples/data/raw/{}_R2_001.fastq.gz \\\n-S ../output/{}.sam\n```\n\n\nconvert SAM to BAM\nfor file in ../output/*sam; do\n    base=$(basename \"$file\" .sam)\n    /home/shared/samtools-1.12/samtools view -@ 40 -bS \"$file\" | \\\n    /home/shared/samtools-1.12/samtools sort -@ 40 \\\n    -o ../output/\"$base\".bam\ndone"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "course-fish541-2024",
    "section": "",
    "text": "This is a Quarto website.\nUse menu at left to access modules and code"
  },
  {
    "objectID": "index.html#stuff-to-read-review",
    "href": "index.html#stuff-to-read-review",
    "title": "course-fish541-2024",
    "section": "Stuff to read / review:",
    "text": "Stuff to read / review:\n\nTusk (Things you should know) - https://robertslab.github.io/tusk/\nLab Handbook - https://robertslab.github.io/resources/\nFISH 546 Bioinformatics for Environmental Sciences\n\nThis course teaches core computing skills as well as project specific approaches. Each student will be developing and completing a research project targeting journal article submission by the end of the Quarter. There will be an emphasis on developing habits that increase automation which in turn will facilitate reproducibility. The primary course platform will be centered around GitHub, with each student creating their own repositories.\nurl: https://sr320.github.io/course-fish546-2023/"
  },
  {
    "objectID": "modules/align.html",
    "href": "modules/align.html",
    "title": "Alignment",
    "section": "",
    "text": "Opportunities in Functional Genomics: A Primer on Lab and Computational Aspects"
  },
  {
    "objectID": "modules/align.html#marineomics-rna-seq-panel-discussion",
    "href": "modules/align.html#marineomics-rna-seq-panel-discussion",
    "title": "Alignment",
    "section": "MarineOmics RNA-seq Panel Discussion",
    "text": "MarineOmics RNA-seq Panel Discussion"
  },
  {
    "objectID": "modules/align.html#downloading-reference",
    "href": "modules/align.html#downloading-reference",
    "title": "Alignment",
    "section": "Downloading reference",
    "text": "Downloading reference\nThis code grabs the Pacific oyster fasta file of genes and does so ignoring the fact that gannet does not have a security certificate to authenticate (--insecure). This is usually not recommended however we know the server.\n```{bash}\ncd ../data\ncurl --insecure -O https://gannet.fish.washington.edu/seashell/bu-github/nb-2023/Cgigas/data/rna.fna\n```\n\n\n\n\n\n\nNote\n\n\n\nCreating index can take some time\n\n\nThis code is indexing the file rna.fna while also renaming it as cgigas_roslin_rna.index.\n```{bash}\n/home/shared/kallisto/kallisto \\\nindex -i \\\n../data/cgigas_roslin_rna.index \\\n../data/rna.fna\n```"
  },
  {
    "objectID": "modules/align.html#downloading-sequence-reads",
    "href": "modules/align.html#downloading-sequence-reads",
    "title": "Alignment",
    "section": "Downloading sequence reads",
    "text": "Downloading sequence reads\nSequence reads are on a public server at https://gannet.fish.washington.edu/seashell/bu-github/nb-2023/Cgigas/data/nopp/\n\n\n\nSample\nSampleID\n\n\nD-control\nD54\n\n\nD-control\nD55\n\n\nD-control\nD56\n\n\nD-control\nD57\n\n\nD-control\nD58\n\n\nD-control\nD59\n\n\nD-control\nM45\n\n\nD-control\nM46\n\n\nD-control\nM48\n\n\nD-control\nM49\n\n\nD-control\nM89\n\n\nD-control\nM90\n\n\nD-desiccation\nN48\n\n\nD-desiccation\nN49\n\n\nD-desiccation\nN50\n\n\nD-desiccation\nN51\n\n\nD-desiccation\nN52\n\n\nD-desiccation\nN53\n\n\nD-desiccation\nN54\n\n\nD-desiccation\nN55\n\n\nD-desiccation\nN56\n\n\nD-desiccation\nN57\n\n\nD-desiccation\nN58\n\n\nD-desiccation\nN59\n\n\n\nThis code uses recursive feature of wget (see this weeks’ reading) to get all 24 files. Additionally as with curl above we are ignoring the fact there is not security certificate with --no-check-certificate\n```{bash}\ncd ../data \nwget --recursive --no-parent --no-directories \\\n--no-check-certificate \\\n--accept '*.fastq.gz' \\\nhttps://gannet.fish.washington.edu/seashell/bu-github/nb-2023/Cgigas/data/nopp/\n```\nThe next chunk first creates a subdirectory\nThen performs the following steps:\nThe xargs command in Unix-like systems is used to build and execute command lines from standard input. It’s often combined with other commands to perform complex operations. In your example, xargs is used twice in a pipeline that starts with the find command. Here’s a breakdown of what each part of the command does:\n\nfind ../data/*fastq.gz:\n\nThis command finds all files in the ../data/ directory (and its subdirectories) with names ending in *fastq.gz.\n\n| xargs basename -s _L001_R1_001.fastq.gz:\n\nThe output of find (paths to .fastq.gz files) is piped (|) to xargs, which then applies the basename -s _L001_R1_001.fastq.gz command to each path.\nbasename is used to strip the directory and suffix from filenames. The -s option specifies a suffix to remove.\nIn this case, basename removes the directory path and the suffix _L001_R1_001.fastq.gz from each filename.\n\n| xargs -I{} /home/shared/kallisto/kallisto quant -i ../data/cgigas_roslin_rna.index -o ../output/kallisto_01/{} -t 4 --single -l 100 -s 10 ../data/{}_L001_R1_001.fastq.gz:\n\nThe output from the previous xargs (which are now the modified filenames) is piped to another xargs command.\n-I{} is used to specify a replacement string {}. This string is replaced by each input line (filename) in the subsequent command.\nThe command /home/shared/kallisto/kallisto quant... is executed for each input line, with {} being replaced by the input filename (without path and specific suffix).\nThis part of the command runs the kallisto quant program for RNA sequence quantification, using various options and input files. The {} placeholder is replaced by the current filename (from the previous steps) in two places: for the output directory and for the input .fastq.gz file.\n\n\nIn summary, this command sequence finds .fastq.gz files, modifies their names by removing paths and a specific suffix, and then runs a kallisto quant command on each file, directing the output to a specific directory and using certain program options. This is a common pattern in bioinformatics workflows, where operations need to be applied to multiple files in an automated manner.\n\n-t 4: Use 4 threads for the computation.\n--single -l 100 -s 10: Specify that the input file contains single-end reads (–single), with an average read length of 100 (-l 100) and a standard deviation of 10 (-s 10).\n\n```{bash}\nmkdir ../output/kallisto_01\n\nfind ../data/*fastq.gz \\\n| xargs basename -s _L001_R1_001.fastq.gz | xargs -I{} /home/shared/kallisto/kallisto \\\nquant -i ../data/cgigas_roslin_rna.index \\\n-o ../output/kallisto_01/{} \\\n-t 4 \\\n--single -l 100 -s 10 ../data/{}_L001_R1_001.fastq.gz\n```\nThis command runs the abundance_estimates_to_matrix.pl script from the Trinity RNA-seq assembly software package to create a gene expression matrix from kallisto output files.\nThe specific options and arguments used in the command are as follows:\n\nperl /home/shared/trinityrnaseq-v2.12.0/util/abundance_estimates_to_matrix.pl: Run the abundance_estimates_to_matrix.pl script from Trinity.\n--est_method kallisto: Specify that the abundance estimates were generated using kallisto.\n--gene_trans_map none: Do not use a gene-to-transcript mapping file.\n--out_prefix ../output/kallisto_01: Use ../output/kallisto_01 as the output directory and prefix for the gene expression matrix file.\n--name_sample_by_basedir: Use the sample directory name (i.e., the final directory in the input file paths) as the sample name in the output matrix.\n\nAnd then there are the kallisto abundance files to use as input for creating the gene expression matrix.\n\n```{bash}\nperl /home/shared/trinityrnaseq-v2.12.0/util/abundance_estimates_to_matrix.pl \\\n--est_method kallisto \\\n    --gene_trans_map none \\\n    --out_prefix ../output/kallisto_01 \\\n    --name_sample_by_basedir \\\n    ../output/kallisto_01/D54_S145/abundance.tsv \\\n    ../output/kallisto_01/D56_S136/abundance.tsv \\\n    ../output/kallisto_01/D58_S144/abundance.tsv \\\n    ../output/kallisto_01/M45_S140/abundance.tsv \\\n    ../output/kallisto_01/M48_S137/abundance.tsv \\\n    ../output/kallisto_01/M89_S138/abundance.tsv \\\n    ../output/kallisto_01/D55_S146/abundance.tsv \\\n    ../output/kallisto_01/D57_S143/abundance.tsv \\\n    ../output/kallisto_01/D59_S142/abundance.tsv \\\n    ../output/kallisto_01/M46_S141/abundance.tsv \\\n    ../output/kallisto_01/M49_S139/abundance.tsv \\\n    ../output/kallisto_01/M90_S147/abundance.tsv \\\n    ../output/kallisto_01/N48_S194/abundance.tsv \\\n    ../output/kallisto_01/N50_S187/abundance.tsv \\\n    ../output/kallisto_01/N52_S184/abundance.tsv \\\n    ../output/kallisto_01/N54_S193/abundance.tsv \\\n    ../output/kallisto_01/N56_S192/abundance.tsv \\\n    ../output/kallisto_01/N58_S195/abundance.tsv \\\n    ../output/kallisto_01/N49_S185/abundance.tsv \\\n    ../output/kallisto_01/N51_S186/abundance.tsv \\\n    ../output/kallisto_01/N53_S188/abundance.tsv \\\n    ../output/kallisto_01/N55_S190/abundance.tsv \\\n    ../output/kallisto_01/N57_S191/abundance.tsv \\\n    ../output/kallisto_01/N59_S189/abundance.tsv\n```"
  }
]