---
title: "Alignment"
---

# Reading

-   [Opportunities in Functional Genomics: A Primer on Lab and Computational Aspects](https://d.pr/f/ngmWkw)

# Objectives

Learn how to take RNA-seq data and Align to get count matrix.

# Transcript Quantification (Pseudo - alignment)

After quality control, the next step is to quantify the transcript expression levels using Kallisto. Kallisto uses a pseudoalignment approach, which is much faster than traditional alignment-based methods and does not require a reference genome. Kallisto generates transcript-level abundance estimates that can be used for differential expression analysis.

To quantify the transcript expression levels using Kallisto, run the following command:

``` bash
kallisto quant -i index_file -o output_folder input.fastq
```

Replace index_file with the path to the Kallisto index file for the reference transcriptome, and replace output_folder with the name of the output folder.

::: callout-note
## Case Study

<https://github.com/RobertsLab/paper-tanner-crab/blob/master/notebooks/kallisto-4libraries.ipynb>
:::

# Transcript Quantification (Alignment)

[HiSat2](https://daehwankimlab.github.io/hisat2/manual/)

Benefits to using [`HISAT2`](https://daehwankimlab.github.io/hisat2/) for alignments:

-   Fast.

-   Can detect exon/intron junctions (i.e. alternative isoform splice sites).

For RNA-Seq, [`HISAT2`](https://daehwankimlab.github.io/hisat2/) alignments are frequently followed up using [`StringTie`](https://ccb.jhu.edu/software/stringtie/) for transcript assembly and quantitation of splice variants.

General usage:

1.  Build a [`HISAT2`](https://daehwankimlab.github.io/hisat2/) reference sequence index:

    ``` bash
    # Create Hisat2 exons tab file
    "${programs_array[hisat2_exons]}" \
    "${transcripts_gtf}" \
    > "${exons}"

    # Create Hisat2 splice sites tab file
    "${programs_array[hisat2_splice_sites]}" \
    "${transcripts_gtf}" \
    > "${splice_sites}"

    # Build Hisat2 reference index using splice sites and exons
    "${programs_array[hisat2_build]}" \
    "${genome_fasta}" \
    "${genome_index_name}" \
    --exon "${exons}" \
    --ss "${splice_sites}" \
    -p "${threads}" \
    2> hisat2-build_stats.txt
    ```

2.  Perform alignment(s):

    ``` bash
    # Hisat2 alignments
    "${programs_array[hisat2]}" \
    -x "${genome_index_name}" \
    -1 "${fastq_list_R1}" \
    -2 "${fastq_list_R2}" \
    -S "${sample_name}".sam \
    --threads "${threads}" \
    2> "${sample_name}"-hisat2_stats.txt

    # Sort SAM files, convert to BAM, and index
    ${programs_array[samtools_view]} \
    -@ "${threads}" \
    -Su "${sample_name}".sam \
    | ${programs_array[samtools_sort]} - \
    -@ "${threads}" \
    -o "${sample_name}".sorted.bam
    ${programs_array[samtools_index]} "${sample_name}".sorted.bam


    # Delete unneccessary index files
    rm "${genome_index_name}"*.ht2

    # Delete unneeded SAM files
    rm ./*.sam
    ```

See links in the "use cases" section below for full-fledged scripts and advanced usage (e.g. assigning read groups to alignment files (SAM) for improved downstream handling/accessiblity).

::: callout-note
## Case Studies

-   [RNAseq Alignments - P.generosa Alignments and Alternative Transcript Identification Using Hisat2 and StringTie on Mox](https://robertslab.github.io/sams-notebook/2022/09/14/RNAseq-Alignments-P.generosa-Alignments-and-Alternative-Transcript-Identification-Using-Hisat2-and-StringTie-on-Mox.html)

-   [Splice Site Identification - S.namaycush Liver Parasitized and Non-Parasitized SRA RNAseq Using Hisat2-Stingtie with Genome GCF_016432855.1](https://robertslab.github.io/sams-notebook/2022/08/10/Splice-Site-Identification-S.namaycush-Liver-Parasitized-and-Non-Parasitized-SRA-RNAseq-Using-Hisat2-Stingtie-with-Genome-GCF_016432855.1.html)
:::



# Supplemental Info

## MarineOmics RNA-seq Panel Discussion

{{< video https://youtu.be/-gQ59m2cck0 >}}



# Exercise 

For this assignment you will be taking RNA-seq reads off the sequencer, and determining what genes are expressed higher in treatment group A compared to treatments group B. Why would someone want to do this? This can tell you something about the physiological response to a "treatment", which generally speaking could be anything from environment, disease, developmental stage, tissue, species...

::: callout-important
## Assignment

Generate a plot and table of differentially expressed genes.
:::

# Software

For this assignment we will be using [kallisto](https://pachterlab.github.io/kallisto/) (bash), DESeq2 (r).

# Installing kallisto

::: callout-note
## Just for reference as will be using raven for assignment (recommended).
:::

Navigate through to a terminal and create directory in your home directory named `programs`

``` bash
jovyan@jupyter-sr320:~$ pwd
/home/jovyan
jovyan@jupyter-sr320:~$ mkdir programs
```

Grab (`wget`) the program from site listed above.

``` bash
jovyan@jupyter-sr320:~$ cd programs/
jovyan@jupyter-sr320:~/programs$ wget https://github.com/pachterlab/kallisto/releases/download/v0.46.1/kallisto_linux-v0.46.1.tar.gz
```

Uncompress the file.

``` bash
jovyan@jupyter-sr320:~/programs$ cd kallisto
jovyan@jupyter-sr320:~/programs/kallisto$ ls
kallisto  license.txt  README.md  test
jovyan@jupyter-sr320:~/programs/kallisto$ ./kallisto 
kallisto 0.46.1

Usage: kallisto <CMD> [arguments] ..

Where <CMD> can be one of:

    index         Builds a kallisto index 
    quant         Runs the quantification algorithm 
    bus           Generate BUS files for single-cell data 
    pseudo        Runs the pseudoalignment step 
    merge         Merges several batch runs 
    h5dump        Converts HDF5-formatted results to plaintext
    inspect       Inspects and gives information about an index
    version       Prints version information
    cite          Prints citation information

Running kallisto <CMD> without arguments prints usage information for <CMD>
```

::: callout-warning
## GitHub file size limit

Commit early and often but `ignore` files that are larger that 100 MB (or you will likely lose everything since prior commit).

You can use Git's built-in hooks to automatically ignore files larger than 100 MB. Here are the steps to follow:

Create a new file in the `.git/hooks/` directory of your repository called `pre-commit`.

Add the following code to the `pre-commit` file:

``` bash
#!/bin/bash

# Maximum file size (in bytes)
max_file_size=104857600

# Find all files larger than max_file_size and add them to the .gitignore file
find . -type f -size +$max_file_sizec -exec echo "{}" >> .gitignore \;
```

This code sets the max_file_size variable to 100 MB and then uses the find command to locate all files in the repository that are larger than the specified max_file_size. The exec option of the find command appends the name of each file that matches the criteria to the .gitignore file.

Save the pre-commit file and make it executable by running the following command:

``` bash
chmod +x .git/hooks/pre-commit
```

With these changes, whenever you run a git commit command, Git will first execute the pre-commit hook, which will automatically add any files larger than 100 MB to the .gitignore file. This will prevent Git from tracking these files in the repository going forward.

This might also work - `git reset --mixed HEAD~1`
:::

# Running kallisto

kallisto is already installed on raven (`/home/shared/kallisto/kallisto`).

::: callout-important
When accessing raven off-campus you have to use [Husky OnNet](https://itconnect.uw.edu/tools-services-support/networks-connectivity/husky-onnet/)
:::

## Downloading reference

This code grabs the Pacific oyster fasta file of genes and does so ignoring the fact that *gannet* does not have a security certificate to authenticate (`--insecure`). This is usually not recommended however we know the server.

         
``` {{bash}}
cd ../data
curl --insecure -O https://gannet.fish.washington.edu/seashell/bu-github/nb-2023/Cgigas/data/rna.fna
```


::: callout-note
Creating index can take some time
:::

This code is indexing the file `rna.fna` while also renaming it as `cgigas_roslin_rna.index`.

         
``` {{bash}}
/home/shared/kallisto/kallisto \
index -i \
../data/cgigas_roslin_rna.index \
../data/rna.fna
```


## Downloading sequence reads

Sequence reads are on a public server at https://gannet.fish.washington.edu/seashell/bu-github/nb-2023/Cgigas/data/nopp/

|               |          |
|---------------|----------|
| Sample        | SampleID |
| D-control     | D54      |
| D-control     | D55      |
| D-control     | D56      |
| D-control     | D57      |
| D-control     | D58      |
| D-control     | D59      |
| D-control     | M45      |
| D-control     | M46      |
| D-control     | M48      |
| D-control     | M49      |
| D-control     | M89      |
| D-control     | M90      |
| D-desiccation | N48      |
| D-desiccation | N49      |
| D-desiccation | N50      |
| D-desiccation | N51      |
| D-desiccation | N52      |
| D-desiccation | N53      |
| D-desiccation | N54      |
| D-desiccation | N55      |
| D-desiccation | N56      |
| D-desiccation | N57      |
| D-desiccation | N58      |
| D-desiccation | N59      |

This code uses recursive feature of `wget` (see this weeks' reading) to get all 24 files. Additionally as with `curl` above we are ignoring the fact there is not security certificate with `--no-check-certificate`

        
```{{bash}}
cd ../data 
wget --recursive --no-parent --no-directories \
--no-check-certificate \
--accept '*.fastq.gz' \
https://gannet.fish.washington.edu/seashell/bu-github/nb-2023/Cgigas/data/nopp/
```


The next chunk first creates a subdirectory

Then performs the following steps:

The **`xargs`** command in Unix-like systems is used to build and execute command lines from standard input. It's often combined with other commands to perform complex operations. In your example, **`xargs`** is used twice in a pipeline that starts with the **`find`** command. Here's a breakdown of what each part of the command does:

1.  **`find ../data/*fastq.gz`**:

    -   This command finds all files in the **`../data/`** directory (and its subdirectories) with names ending in **`*fastq.gz`**.

2.  **`| xargs basename -s _L001_R1_001.fastq.gz`**:

    -   The output of **`find`** (paths to **`.fastq.gz`** files) is piped (**`|`**) to **`xargs`**, which then applies the **`basename -s _L001_R1_001.fastq.gz`** command to each path.

    -   **`basename`** is used to strip the directory and suffix from filenames. The **`-s`** option specifies a suffix to remove.

    -   In this case, **`basename`** removes the directory path and the suffix **`_L001_R1_001.fastq.gz`** from each filename.

3.  **`| xargs -I{} /home/shared/kallisto/kallisto quant -i ../data/cgigas_roslin_rna.index -o ../output/kallisto_01/{} -t 4 --single -l 100 -s 10 ../data/{}_L001_R1_001.fastq.gz`**:

    -   The output from the previous **`xargs`** (which are now the modified filenames) is piped to another **`xargs`** command.

    -   **`-I{}`** is used to specify a replacement string **`{}`**. This string is replaced by each input line (filename) in the subsequent command.

    -   The command **`/home/shared/kallisto/kallisto quant...`** is executed for each input line, with **`{}`** being replaced by the input filename (without path and specific suffix).

    -   This part of the command runs the **`kallisto quant`** program for RNA sequence quantification, using various options and input files. The **`{}`** placeholder is replaced by the current filename (from the previous steps) in two places: for the output directory and for the input **`.fastq.gz`** file.

In summary, this command sequence finds **`.fastq.gz`** files, modifies their names by removing paths and a specific suffix, and then runs a **`kallisto quant`** command on each file, directing the output to a specific directory and using certain program options. This is a common pattern in bioinformatics workflows, where operations need to be applied to multiple files in an automated manner.

-   `-t 4`: Use 4 threads for the computation.

-   `--single -l 100 -s 10`: Specify that the input file contains single-end reads (--single), with an average read length of 100 (-l 100) and a standard deviation of 10 (-s 10).

         
``` {{bash}}
mkdir ../output/kallisto_01

find ../data/*fastq.gz \
| xargs basename -s _L001_R1_001.fastq.gz | xargs -I{} /home/shared/kallisto/kallisto \
quant -i ../data/cgigas_roslin_rna.index \
-o ../output/kallisto_01/{} \
-t 4 \
--single -l 100 -s 10 ../data/{}_L001_R1_001.fastq.gz
```


This command runs the `abundance_estimates_to_matrix.pl` script from the Trinity RNA-seq assembly software package to create a gene expression matrix from kallisto output files.

The specific options and arguments used in the command are as follows:

-   `perl /home/shared/trinityrnaseq-v2.12.0/util/abundance_estimates_to_matrix.pl`: Run the abundance_estimates_to_matrix.pl script from Trinity.
-   `--est_method kallisto`: Specify that the abundance estimates were generated using kallisto.
-   `--gene_trans_map none`: Do not use a gene-to-transcript mapping file.
-   `--out_prefix ../output/kallisto_01`: Use ../output/kallisto_01 as the output directory and prefix for the gene expression matrix file.
-   `--name_sample_by_basedir`: Use the sample directory name (i.e., the final directory in the input file paths) as the sample name in the output matrix.\
-   And then there are the kallisto abundance files to use as input for creating the gene expression matrix.

         
``` {{bash}}
perl /home/shared/trinityrnaseq-v2.12.0/util/abundance_estimates_to_matrix.pl \
--est_method kallisto \
    --gene_trans_map none \
    --out_prefix ../output/kallisto_01 \
    --name_sample_by_basedir \
    ../output/kallisto_01/D54_S145/abundance.tsv \
    ../output/kallisto_01/D56_S136/abundance.tsv \
    ../output/kallisto_01/D58_S144/abundance.tsv \
    ../output/kallisto_01/M45_S140/abundance.tsv \
    ../output/kallisto_01/M48_S137/abundance.tsv \
    ../output/kallisto_01/M89_S138/abundance.tsv \
    ../output/kallisto_01/D55_S146/abundance.tsv \
    ../output/kallisto_01/D57_S143/abundance.tsv \
    ../output/kallisto_01/D59_S142/abundance.tsv \
    ../output/kallisto_01/M46_S141/abundance.tsv \
    ../output/kallisto_01/M49_S139/abundance.tsv \
    ../output/kallisto_01/M90_S147/abundance.tsv \
    ../output/kallisto_01/N48_S194/abundance.tsv \
    ../output/kallisto_01/N50_S187/abundance.tsv \
    ../output/kallisto_01/N52_S184/abundance.tsv \
    ../output/kallisto_01/N54_S193/abundance.tsv \
    ../output/kallisto_01/N56_S192/abundance.tsv \
    ../output/kallisto_01/N58_S195/abundance.tsv \
    ../output/kallisto_01/N49_S185/abundance.tsv \
    ../output/kallisto_01/N51_S186/abundance.tsv \
    ../output/kallisto_01/N53_S188/abundance.tsv \
    ../output/kallisto_01/N55_S190/abundance.tsv \
    ../output/kallisto_01/N57_S191/abundance.tsv \
    ../output/kallisto_01/N59_S189/abundance.tsv
```

