---
title: "kallisto"
---

TLDR

# Indexing

```{{bash}}
/home/shared/kallisto/kallisto index \
-i ../data/Phel_transcriptome.index \
../data/Phel_transcriptome.fa
```

# Quantification

```{{bash}}
mkdir ../output/kallisto_01

find ../data/*_R1.fastq.gz \
| xargs basename -s _R1.fastq.gz | xargs -I{} /home/shared/kallisto/kallisto quant \
-i ../data/Phel_transcriptome.index \
-o ../output/kallisto_01/{} \
-t 20 \
--fr-stranded ../data/{}_R1.fastq.gz \
--rf-stranded ../data/{}_R2.fastq.gz \
2> ../output/kallisto_01/kallisto.out
```



# Stats

::: callout-tip
## multiqc
Remember this can can be used on over 140 program outputs and is a nice way to get a quick overview of your data.
:::

```{{bash}}
/home/sam/programs/mambaforge/bin/multiqc \
../output/kallisto_01/kallisto.out
```

or

```{{bash}}
eval "$(/opt/anaconda/anaconda3/bin/conda shell.bash hook)"
conda activate
which multiqc

cd ../output/kallisto_01/

multiqc .
```

# Merge Quant data

```{{bash}}
perl /home/shared/trinityrnaseq-v2.12.0/util/abundance_estimates_to_matrix.pl \
--est_method kallisto \
    --gene_trans_map none \
    --out_prefix ../output/kallisto_01 \
    --name_sample_by_basedir \
    ../output/kallisto_01/D54_S145/abundance.tsv \
```



# DESeq2

```{{r}}
library(DESeq2)
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
library(data.table)
```

tho you may need to install DESeq2 first

```{{r}}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("DESeq2")
```




```{{r}}
countmatrix <- read.delim("../output/kallisto_01.isoform.counts.matrix", header = TRUE, sep = '\t')
rownames(countmatrix) <- countmatrix$X
countmatrix <- countmatrix[,-1]
head(countmatrix)
```


```{{r}}
countmatrix <- round(countmatrix, 0)
str(countmatrix)
```



```{{r}}
dim(countmatrix)
dim(deseq2.colData)

length(colnames(data))

deseq2.colData <- data.frame(condition=factor(c(rep("control", 12), rep("desicated", 12))), 
                             type=factor(rep("single-read", 24)))
rownames(deseq2.colData) <- colnames(data)
deseq2.dds <- DESeqDataSetFromMatrix(countData = countmatrix,
                                     colData = deseq2.colData, 
```


```{{r}}
deseq2.dds <- DESeq(deseq2.dds)
deseq2.res <- results(deseq2.dds)
deseq2.res <- deseq2.res[order(rownames(deseq2.res)), ]

```



```{{r}}
vsd <- vst(deseq2.dds, blind = FALSE)
plotPCA(vsd, intgroup = "condition")
```


```{{r}}
# Select top 50 differentially expressed genes
res <- results(deseq2.dds)
res_ordered <- res[order(res$padj), ]
top_genes <- row.names(res_ordered)[1:50]
```


```{{r}}
# Extract counts and normalize
counts <- counts(deseq2.dds, normalized = TRUE)
counts_top <- counts[top_genes, ]

# Log-transform counts
log_counts_top <- log2(counts_top + 1)

# Generate heatmap
pheatmap(log_counts_top, scale = "row")
```

```{{r}}
head(deseq2.res)
```

```{{r}}
# Count number of hits with adjusted p-value less then 0.05
dim(deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ])

tmp <- deseq2.res
# The main plot
plot(tmp$baseMean, tmp$log2FoldChange, pch=20, cex=0.45, ylim=c(-3, 3), log="x", col="darkgray",
     main="DEG Dessication  (pval <= 0.05)",
     xlab="mean of normalized counts",
     ylab="Log2 Fold Change")
# Getting the significant points and plotting them again so they're a different color
tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ]
points(tmp.sig$baseMean, tmp.sig$log2FoldChange, pch=20, cex=0.45, col="red")
# 2 FC lines
abline(h=c(-1,1), col="blue")

```